{"ast":null,"code":"var _jsxFileName = \"/Users/toddstorm/workspace/mechanism-take-home/UI/src/containers/Home/Home.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport _ from 'lodash';\nimport Loading from '../../components/Loading/Loading';\nimport { Button, makeStyles, MenuItem, Select } from '@material-ui/core';\nimport useAppJwt from '../../hooks/useAppJwt';\nimport AddTicker from '../../components/AddTicker/AddTicker';\nconst axiosOptions = {\n  headers: {\n    'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY,\n    'x-rapidapi-host': process.env.REACT_APP_RAPID_API_HOST\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  dropDown: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    marginLeft: 15\n  }\n}));\n\nconst Home = () => {\n  const [labels, setLabels] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [portfolioLoaded, setPortfolioLoaded] = useState(false);\n  const [indexLoaded, setIndexLoaded] = useState(false);\n  const [open, setOpen] = useState(false); // modal\n\n  const [portfolioInitialTotal, setPortfolioInitialTotal] = useState(0); // for bottom label\n\n  const [portfolioStockCount, setPortfolioStockCount] = useState(0);\n  const [portfolioFinalTotal, setPortfolioFinalTotal] = useState(0); // for bottom label\n\n  const [indexFinalTotal, setIndexFinalTotal] = useState(0); // for bottom label\n\n  const {\n    appToken,\n    isAuthenticated\n  } = useAppJwt();\n  const [indexTicker, setIndexTicker] = useState(''); // initial index state\n\n  const classes = useStyles();\n  const loadPortfolioData = useCallback(async () => {\n    const portfolioData = await axios.get(process.env.REACT_APP_PORFOLIO_SERVICE, {\n      headers: {\n        'Authorization': `Bearer ${appToken}`\n      }\n    });\n\n    const portfolioValue = _.map(portfolioData.data, stock => {\n      return parseFloat(stock.valueOnAquired) * parseInt(stock.units);\n    });\n\n    setPortfolioStockCount(portfolioData.data.length);\n    setPortfolioInitialTotal(_.sum(portfolioValue));\n\n    const tickers = _.map(portfolioData.data, stock => {\n      return stock.ticker;\n    });\n\n    const requests = []; // setup the axios requests for the portfolio tickers\n\n    _.forEach(tickers, ticker => {\n      requests.push(axios.get(`${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${ticker}&range=1y&region=US`, axiosOptions));\n    });\n\n    axios.all(requests).then(axios.spread((...responses) => {\n      const newSeries = [];\n      let portfolioTotal = 0;\n      let i = 0;\n\n      _.forEach(responses, response => {\n        const quotes = _.get(response.data, 'chart.result[0].indicators.quote[0].close', []);\n\n        quotes[0] = portfolioValue[i]; // initial investment\n\n        var j;\n\n        for (j = 1; j < quotes.length; j++) {\n          quotes[j] = quotes[j] * 100;\n        }\n\n        portfolioTotal += quotes[quotes.length - 1];\n        newSeries.push({\n          name: tickers[i],\n          type: 'spline',\n          data: quotes\n        });\n        i++;\n      });\n\n      const updatedLabels = _.map(_.get(responses[0], 'data.chart.result[0].timestamp', []), dt => {\n        const d = new Date(0);\n        d.setUTCSeconds(dt);\n        return d.toLocaleDateString(\"en-US\");\n      });\n\n      setPortfolioFinalTotal(portfolioTotal);\n      setSeries(newSeries);\n      setLabels(updatedLabels);\n      setPortfolioLoaded(true);\n    }));\n  }, [appToken]);\n  const loadData = useCallback(async () => {\n    if (indexTicker === '') return;\n    const one = `${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${indexTicker}&range=1y&region=US`;\n    const requestOne = axios.get(one, axiosOptions); // this could be a single call, but left in in case might want to call multiple index for comparisons.\n\n    axios.all([requestOne]).then(axios.spread((...responses) => {\n      const responseOne = responses[0];\n\n      const newSeries = _.cloneDeep(series);\n\n      if (newSeries.length !== portfolioStockCount) {\n        newSeries.splice(newSeries.length - 1); // remove last index\n      }\n\n      const data = _.get(responseOne.data, 'chart.result[0].indicators.quote[0].close', []);\n\n      const initialUnits = portfolioInitialTotal / data[0];\n\n      const formattedData = _.map(data, d => {\n        return d > 0 ? initialUnits * d : 0;\n      });\n\n      setIndexFinalTotal(formattedData[formattedData.length - 1]);\n      newSeries.push({\n        name: indexTicker,\n        type: 'spline',\n        data: formattedData\n      });\n      setIndexLoaded(true);\n      setSeries(newSeries);\n    })).catch(errors => {\n      console.log(\"Error getting data\", errors);\n    });\n  }, [indexTicker, portfolioInitialTotal, series, portfolioStockCount]);\n  useEffect(() => {\n    // no point loading indexes to compare if no portfolio value loaded\n    if (portfolioInitialTotal > 0 && !indexLoaded) {\n      loadData();\n    }\n  }, [loadData, portfolioInitialTotal, indexLoaded]);\n  useEffect(() => {\n    if (!_.isEmpty(appToken) && !portfolioLoaded) {\n      loadPortfolioData();\n    }\n  }, [portfolioLoaded, appToken, loadPortfolioData]);\n  if (!portfolioLoaded || !isAuthenticated) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 52\n    }\n  });\n  const chartOptions = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'My Portfolio'\n    },\n    xAxis: {\n      categories: labels\n    },\n    series: series\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = isNewStock => {\n    setOpen(false);\n\n    if (isNewStock) {\n      setPortfolioLoaded(false);\n      setIndexTicker('');\n    }\n  };\n\n  const onIndexChange = event => {\n    setIndexTicker(event.target.value);\n    setIndexLoaded(false);\n  };\n\n  const TotalsLabel = () => {\n    if (indexFinalTotal > 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }, \"Based on your initial investment, the difference in choosing the market index (\", indexTicker, \") vs your stocks is: $\", Math.round(portfolioFinalTotal - indexFinalTotal));\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.dropDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 8\n    }\n  }, \"Choose your market index\", /*#__PURE__*/React.createElement(Select, {\n    value: indexTicker,\n    onChange: onIndexChange,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"NDX\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, \"NASDAQ\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"DJU\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, \"Dow Jones Average\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"^GSPC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, \"S&P 500\"))), series.length > 0 ? /*#__PURE__*/React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 28\n    }\n  }) : null, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOpen,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, \"Add Ticker\"), /*#__PURE__*/React.createElement(AddTicker, {\n    open: open,\n    handleClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, \"Test\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, \"Your initial investment: $\", portfolioInitialTotal), /*#__PURE__*/React.createElement(TotalsLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/toddstorm/workspace/mechanism-take-home/UI/src/containers/Home/Home.js"],"names":["React","useCallback","useEffect","useState","axios","Highcharts","HighchartsReact","_","Loading","Button","makeStyles","MenuItem","Select","useAppJwt","AddTicker","axiosOptions","headers","process","env","REACT_APP_RAPID_API_KEY","REACT_APP_RAPID_API_HOST","useStyles","theme","dropDown","display","alignItems","justifyContent","marginLeft","Home","labels","setLabels","series","setSeries","portfolioLoaded","setPortfolioLoaded","indexLoaded","setIndexLoaded","open","setOpen","portfolioInitialTotal","setPortfolioInitialTotal","portfolioStockCount","setPortfolioStockCount","portfolioFinalTotal","setPortfolioFinalTotal","indexFinalTotal","setIndexFinalTotal","appToken","isAuthenticated","indexTicker","setIndexTicker","classes","loadPortfolioData","portfolioData","get","REACT_APP_PORFOLIO_SERVICE","portfolioValue","map","data","stock","parseFloat","valueOnAquired","parseInt","units","length","sum","tickers","ticker","requests","forEach","push","REACT_APP_QUOTE_SERVICE","all","then","spread","responses","newSeries","portfolioTotal","i","response","quotes","j","name","type","updatedLabels","dt","d","Date","setUTCSeconds","toLocaleDateString","loadData","one","requestOne","responseOne","cloneDeep","splice","initialUnits","formattedData","catch","errors","console","log","isEmpty","chartOptions","chart","title","text","xAxis","categories","handleOpen","handleClose","isNewStock","onIndexChange","event","target","value","TotalsLabel","Math","round"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport _ from 'lodash';\nimport Loading from '../../components/Loading/Loading';\nimport { Button, makeStyles, MenuItem, Select } from '@material-ui/core';\nimport useAppJwt from '../../hooks/useAppJwt';\nimport AddTicker from '../../components/AddTicker/AddTicker';\n\nconst axiosOptions = {\n  headers: {\n    'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY,\n    'x-rapidapi-host': process.env.REACT_APP_RAPID_API_HOST,\n  }\n};\n\nconst useStyles = makeStyles((theme) => ({\n  dropDown: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    marginLeft: 15,\n  },\n}));\n\nconst Home = () => {\n  const [labels, setLabels] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [portfolioLoaded, setPortfolioLoaded] = useState(false);\n  const [indexLoaded, setIndexLoaded] = useState(false);\n  const [open, setOpen] = useState(false); // modal\n  const [portfolioInitialTotal, setPortfolioInitialTotal] = useState(0); // for bottom label\n  const [portfolioStockCount, setPortfolioStockCount] = useState(0);\n  const [portfolioFinalTotal, setPortfolioFinalTotal] = useState(0); // for bottom label\n  const [indexFinalTotal, setIndexFinalTotal] = useState(0); // for bottom label\n  const { appToken, isAuthenticated } = useAppJwt();\n  const [indexTicker, setIndexTicker] = useState(''); // initial index state\n  const classes = useStyles();\n\n  const loadPortfolioData = useCallback(async () => {\n    const portfolioData = await axios.get(process.env.REACT_APP_PORFOLIO_SERVICE, {\n      headers: {\n        'Authorization': `Bearer ${appToken}`,\n      }\n    });\n    \n    const portfolioValue = _.map(portfolioData.data, (stock) => {\n      return parseFloat(stock.valueOnAquired) * parseInt(stock.units);\n    });\n    setPortfolioStockCount(portfolioData.data.length);\n    setPortfolioInitialTotal(_.sum(portfolioValue));\n\n    const tickers = _.map(portfolioData.data, (stock) => {\n      return stock.ticker;\n    });\n\n    const requests = [];\n    // setup the axios requests for the portfolio tickers\n    _.forEach(tickers, (ticker) => {\n       requests.push(axios.get(`${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${ticker}&range=1y&region=US`, axiosOptions));\n    });\n\n    axios.all(requests).then(axios.spread((...responses) => {\n      const newSeries = [];\n      let portfolioTotal = 0;\n      let i = 0;\n      _.forEach(responses, (response) => {\n        const quotes = _.get(response.data, 'chart.result[0].indicators.quote[0].close', []);\n        quotes[0] = portfolioValue[i]; // initial investment\n\n        var j;\n        for (j = 1; j < quotes.length; j++) {\n          quotes[j] = quotes[j] * 100;\n        }\n        portfolioTotal += quotes[quotes.length - 1];\n        newSeries.push({\n              name: tickers[i],\n              type: 'spline',\n              data: quotes,\n            });\n        i++;\n      });\n\n      const updatedLabels = _.map(_.get(responses[0], 'data.chart.result[0].timestamp', []), (dt) => {\n        const d = new Date(0);\n        d.setUTCSeconds(dt);\n        return d.toLocaleDateString(\"en-US\");\n      });\n      setPortfolioFinalTotal(portfolioTotal);\n      setSeries(newSeries);\n      setLabels(updatedLabels);\n      setPortfolioLoaded(true);\n    }))\n  }, [appToken]);\n\n  const loadData = useCallback(async () => {\n    if (indexTicker === '') return;\n    const one = `${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${indexTicker}&range=1y&region=US`;\n    const requestOne = axios.get(one, axiosOptions);\n    // this could be a single call, but left in in case might want to call multiple index for comparisons.\n    axios.all([requestOne]).then(axios.spread((...responses) => {\n      const responseOne = responses[0]\n      const newSeries = _.cloneDeep(series);\n      if (newSeries.length !== portfolioStockCount) {\n        newSeries.splice(newSeries.length - 1); // remove last index\n      }\n      const data = _.get(responseOne.data, 'chart.result[0].indicators.quote[0].close', []);\n      const initialUnits = portfolioInitialTotal / data[0];\n      const formattedData = _.map(data, (d) => {\n        return d > 0 ? initialUnits * d : 0;\n      });\n      setIndexFinalTotal(formattedData[formattedData.length - 1]);\n      newSeries.push({\n        name: indexTicker,\n        type: 'spline',\n        data: formattedData,\n      });\n      setIndexLoaded(true);\n      setSeries(newSeries);\n    })).catch((errors) => {\n      console.log(\"Error getting data\", errors);\n    });\n  }, [indexTicker, portfolioInitialTotal, series, portfolioStockCount]);\n\n  useEffect(() => {\n    // no point loading indexes to compare if no portfolio value loaded\n    if (portfolioInitialTotal > 0 && !indexLoaded) {\n      loadData();\n    }\n  }, [loadData, portfolioInitialTotal, indexLoaded]);\n \n  useEffect(() => {\n    if (!_.isEmpty(appToken) && !portfolioLoaded) {\n      loadPortfolioData()\n    }\n  }, [portfolioLoaded, appToken, loadPortfolioData])\n\n  if (!portfolioLoaded || !isAuthenticated) return <Loading />;\n\n  const chartOptions = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'My Portfolio'\n    },\n    xAxis: {\n      categories: labels,\n    },\n    series: series,\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (isNewStock) => {\n    setOpen(false);\n    if (isNewStock) {\n      setPortfolioLoaded(false);\n      setIndexTicker('');\n    }\n  };\n\n  const onIndexChange = (event) => {\n    setIndexTicker(event.target.value);\n    setIndexLoaded(false);\n  }\n\n  const TotalsLabel = () => {\n    if (indexFinalTotal > 0) {\n      return (\n        <div>Based on your initial investment, the difference in choosing the market index ({indexTicker}) vs your stocks is: ${Math.round(portfolioFinalTotal - indexFinalTotal)}</div>\n      )\n    }\n    return null;\n  };\n\n  return (\n    <div>\n       <div className={classes.dropDown}>\n        Choose your market index\n        <Select value={indexTicker} onChange={onIndexChange} variant=\"outlined\">\n          <MenuItem value=\"NDX\">NASDAQ</MenuItem>\n          <MenuItem value=\"DJU\">Dow Jones Average</MenuItem>\n          <MenuItem value=\"^GSPC\">S&P 500</MenuItem>\n        </Select>\n      </div>\n      {series.length > 0 ? <HighchartsReact highcharts={Highcharts} options={chartOptions} /> : null}\n      <Button onClick={handleOpen} color=\"primary\">Add Ticker</Button>\n      <AddTicker open={open} handleClose={handleClose}>Test</AddTicker>\n      <div>Your initial investment: ${portfolioInitialTotal}</div>\n      <TotalsLabel />\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}