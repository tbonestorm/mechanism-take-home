{"ast":null,"code":"var _jsxFileName = \"/Users/toddstorm/workspace/mechanism-take-home/UI/src/containers/Home/Home.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport _ from 'lodash';\nimport Loading from '../../components/Loading/Loading';\nimport { Button, makeStyles, MenuItem, Select } from '@material-ui/core';\nimport useAppJwt from '../../hooks/useAppJwt';\nimport AddTicker from '../../components/AddTicker/AddTicker';\nconst axiosOptions = {\n  headers: {\n    'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY,\n    'x-rapidapi-host': process.env.REACT_APP_RAPID_API_HOST\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  dropDown: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    marginLeft: 15\n  }\n}));\n\nconst Home = () => {\n  const [labels, setLabels] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [portfolioLoaded, setPortfolioLoaded] = useState(false);\n  const [indexLoaded, setIndexLoaded] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [portfolioInitialTotal, setPortfolioInitialTotal] = useState(0);\n  const [portfolioFinalTotal, setPortfolioFinalTotal] = useState(0);\n  const [indexFinalTotal, setIndexFinalTotal] = useState(0);\n  const {\n    appToken\n  } = useAppJwt();\n  const [indexTicker, setIndexTicker] = useState(''); // initial index state\n\n  const classes = useStyles();\n  const loadPortfolioData = useCallback(async () => {\n    const portfolioData = await axios.get(process.env.REACT_APP_PORFOLIO_SERVICE, {\n      headers: {\n        'Authorization': `Bearer ${appToken}`\n      }\n    });\n\n    const portfolioValue = _.map(portfolioData.data, stock => {\n      return parseFloat(stock.valueOnAquired) * parseInt(stock.units);\n    });\n\n    setPortfolioInitialTotal(_.sum(portfolioValue));\n\n    const tickers = _.map(portfolioData.data, stock => {\n      return stock.ticker;\n    });\n\n    const requests = []; // setup the axios requests for the portfolio tickers\n\n    _.forEach(tickers, ticker => {\n      requests.push(axios.get(`${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${ticker}&range=1y&region=US`, axiosOptions));\n    });\n\n    axios.all(requests).then(axios.spread((...responses) => {\n      const newSeries = [];\n      const newLabels = [];\n      const portfolioTotal = 0;\n      let i = 0;\n\n      _.forEach(responses, response => {\n        const quotes = _.get(response.data, 'chart.result[0].indicators.quote[0].close', []);\n\n        quotes[0] = portfolioValue[i]; // initial investment\n\n        var j;\n\n        for (j = 1; j < quotes.length; j++) {\n          quotes[j] = quotes[j] * 100;\n        }\n\n        portfolioTotal += quotes[j];\n        newSeries.push({\n          name: tickers[i],\n          type: 'spline',\n          data: quotes\n        });\n        i++;\n      });\n\n      const updatedLabels = _.map(_.get(responses[0].data, 'chart.result[0].timestamp', []), dt => {\n        const d = new Date(0);\n        d.setUTCSeconds(dt);\n        return d.toLocaleDateString(\"en-US\");\n      });\n\n      setPortfolioFinalTotal(portfolioTotal);\n      setSeries(newSeries);\n      setLabels(updatedLabels);\n      setPortfolioLoaded(true);\n    }));\n  }, [appToken]);\n  const loadData = useCallback(async () => {\n    if (indexTicker === '') return;\n    const one = `${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${indexTicker}&range=1y&region=US`;\n    const requestOne = axios.get(one, axiosOptions); // this could be a single call, but left in in case might want to call multiple index for comparisons.\n\n    axios.all([requestOne]).then(axios.spread((...responses) => {\n      const responseOne = responses[0];\n      setIndexLoaded(true);\n\n      const newSeries = _.cloneDeep(series);\n\n      series.splice(series.length - 1); // remove last index\n\n      const data = _.get(responseOne.data, 'chart.result[0].indicators.quote[0].close', []);\n\n      const initialUnits = portfolioInitialTotal / data[0];\n\n      const formattedData = _.map(data, d => {\n        return d > 0 ? initialUnits * d : 0;\n      });\n\n      setIndexFinalTotal(formattedData[formattedData.length - 1]);\n      newSeries.push({\n        name: indexTicker,\n        type: 'spline',\n        data: formattedData\n      });\n      setSeries(newSeries);\n    })).catch(errors => {\n      console.log(\"Error getting data\", errors);\n    });\n  }, [indexTicker, portfolioInitialTotal, series]);\n  useEffect(() => {\n    // no point loading indexes to compare if no portfolio value loaded\n    if (portfolioInitialTotal > 0 && !indexLoaded) {\n      loadData();\n    }\n  }, [loadData, portfolioInitialTotal, indexLoaded]);\n  useEffect(() => {\n    if (!_.isEmpty(appToken) && !portfolioLoaded) {\n      loadPortfolioData();\n    }\n  }, [portfolioLoaded, appToken, loadPortfolioData]);\n  if (!portfolioLoaded) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 32\n    }\n  });\n  const chartOptions = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'My Portfolio'\n    },\n    xAxis: {\n      categories: labels\n    },\n    series: series\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = isNewStock => {\n    setOpen(false);\n\n    if (isNewStock) {\n      setPortfolioLoaded(false);\n    }\n  };\n\n  const onIndexChange = event => {\n    setIndexTicker(event.target.value);\n    setIndexLoaded(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.dropDown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 8\n    }\n  }, \"Choose your market index\", /*#__PURE__*/React.createElement(Select, {\n    value: indexTicker,\n    onChange: onIndexChange,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"NDX\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, \"NASDAQ\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"DJU\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, \"Dow Jones Average\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"^GSPC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, \"S&P 500\"))), series.length > 0 ? /*#__PURE__*/React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 28\n    }\n  }) : null, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOpen,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, \"Add Ticker\"), /*#__PURE__*/React.createElement(AddTicker, {\n    open: open,\n    handleClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }, \"Test\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, \"Your initial portfolio total: \", portfolioInitialTotal), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, \"Based on your initial investment, the difference in choosing the market index \", indexTicker, \" is: \", portfolioFinalTotal - indexFinalTotal));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/toddstorm/workspace/mechanism-take-home/UI/src/containers/Home/Home.js"],"names":["React","useCallback","useEffect","useState","axios","Highcharts","HighchartsReact","_","Loading","Button","makeStyles","MenuItem","Select","useAppJwt","AddTicker","axiosOptions","headers","process","env","REACT_APP_RAPID_API_KEY","REACT_APP_RAPID_API_HOST","useStyles","theme","dropDown","display","alignItems","justifyContent","marginLeft","Home","labels","setLabels","series","setSeries","portfolioLoaded","setPortfolioLoaded","indexLoaded","setIndexLoaded","open","setOpen","portfolioInitialTotal","setPortfolioInitialTotal","portfolioFinalTotal","setPortfolioFinalTotal","indexFinalTotal","setIndexFinalTotal","appToken","indexTicker","setIndexTicker","classes","loadPortfolioData","portfolioData","get","REACT_APP_PORFOLIO_SERVICE","portfolioValue","map","data","stock","parseFloat","valueOnAquired","parseInt","units","sum","tickers","ticker","requests","forEach","push","REACT_APP_QUOTE_SERVICE","all","then","spread","responses","newSeries","newLabels","portfolioTotal","i","response","quotes","j","length","name","type","updatedLabels","dt","d","Date","setUTCSeconds","toLocaleDateString","loadData","one","requestOne","responseOne","cloneDeep","splice","initialUnits","formattedData","catch","errors","console","log","isEmpty","chartOptions","chart","title","text","xAxis","categories","handleOpen","handleClose","isNewStock","onIndexChange","event","target","value"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport _ from 'lodash';\nimport Loading from '../../components/Loading/Loading';\nimport { Button, makeStyles, MenuItem, Select } from '@material-ui/core';\nimport useAppJwt from '../../hooks/useAppJwt';\nimport AddTicker from '../../components/AddTicker/AddTicker';\n\nconst axiosOptions = {\n  headers: {\n    'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY,\n    'x-rapidapi-host': process.env.REACT_APP_RAPID_API_HOST,\n  }\n};\n\nconst useStyles = makeStyles((theme) => ({\n  dropDown: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    marginLeft: 15,\n  },\n}));\n\nconst Home = () => {\n  const [labels, setLabels] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [portfolioLoaded, setPortfolioLoaded] = useState(false);\n  const [indexLoaded, setIndexLoaded] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [portfolioInitialTotal, setPortfolioInitialTotal] = useState(0);\n  const [portfolioFinalTotal, setPortfolioFinalTotal] = useState(0);\n  const [indexFinalTotal, setIndexFinalTotal] = useState(0);\n  const { appToken } = useAppJwt();\n  const [indexTicker, setIndexTicker] = useState(''); // initial index state\n  const classes = useStyles();\n\n  const loadPortfolioData = useCallback(async () => {\n    const portfolioData = await axios.get(process.env.REACT_APP_PORFOLIO_SERVICE, {\n      headers: {\n        'Authorization': `Bearer ${appToken}`,\n      }\n    });\n    \n    const portfolioValue = _.map(portfolioData.data, (stock) => {\n      return parseFloat(stock.valueOnAquired) * parseInt(stock.units);\n    });\n\n    setPortfolioInitialTotal(_.sum(portfolioValue));\n\n    const tickers = _.map(portfolioData.data, (stock) => {\n      return stock.ticker;\n    });\n\n    const requests = [];\n    // setup the axios requests for the portfolio tickers\n    _.forEach(tickers, (ticker) => {\n       requests.push(axios.get(`${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${ticker}&range=1y&region=US`, axiosOptions));\n    });\n\n    axios.all(requests).then(axios.spread((...responses) => {\n      const newSeries = [];\n      const newLabels = [];\n      const portfolioTotal = 0;\n      let i = 0;\n      _.forEach(responses, (response) => {\n        const quotes = _.get(response.data, 'chart.result[0].indicators.quote[0].close', []);\n        quotes[0] = portfolioValue[i]; // initial investment\n\n        var j;\n        for (j = 1; j < quotes.length; j++) {\n          quotes[j] = quotes[j] * 100;\n        }\n        portfolioTotal += quotes[j];\n        newSeries.push({\n              name: tickers[i],\n              type: 'spline',\n              data: quotes,\n            });\n        i++;\n      });\n\n      const updatedLabels = _.map(_.get(responses[0].data, 'chart.result[0].timestamp', []), (dt) => {\n        const d = new Date(0);\n        d.setUTCSeconds(dt);\n        return d.toLocaleDateString(\"en-US\");\n      });\n      setPortfolioFinalTotal(portfolioTotal);\n      setSeries(newSeries);\n      setLabels(updatedLabels);\n      setPortfolioLoaded(true);\n    }))\n  }, [appToken]);\n\n  const loadData = useCallback(async () => {\n    if (indexTicker === '') return;\n    const one = `${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${indexTicker}&range=1y&region=US`;\n    const requestOne = axios.get(one, axiosOptions);\n    // this could be a single call, but left in in case might want to call multiple index for comparisons.\n    axios.all([requestOne]).then(axios.spread((...responses) => {\n      const responseOne = responses[0]\n      setIndexLoaded(true);\n      const newSeries = _.cloneDeep(series);\n      series.splice(series.length-1); // remove last index\n      const data = _.get(responseOne.data, 'chart.result[0].indicators.quote[0].close', []);\n\n      const initialUnits = portfolioInitialTotal / data[0];\n      const formattedData = _.map(data, (d) => {\n        return d > 0 ? initialUnits * d : 0;\n      });\n      setIndexFinalTotal(formattedData[formattedData.length - 1]);\n      newSeries.push({\n        name: indexTicker,\n        type: 'spline',\n        data: formattedData,\n      });\n      setSeries(newSeries);\n    })).catch((errors) => {\n      console.log(\"Error getting data\", errors);\n    });\n  }, [indexTicker, portfolioInitialTotal, series]);\n\n  useEffect(() => {\n    // no point loading indexes to compare if no portfolio value loaded\n    if (portfolioInitialTotal > 0 && !indexLoaded) {\n      loadData();\n    }\n  }, [loadData, portfolioInitialTotal, indexLoaded]);\n \n  useEffect(() => {\n    if (!_.isEmpty(appToken) && !portfolioLoaded) {\n      loadPortfolioData()\n    }\n  }, [portfolioLoaded, appToken, loadPortfolioData])\n\n  if (!portfolioLoaded) return <Loading />;\n\n  const chartOptions = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'My Portfolio'\n    },\n    xAxis: {\n      categories: labels,\n    },\n    series: series,\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (isNewStock) => {\n    setOpen(false);\n    if (isNewStock) {\n      setPortfolioLoaded(false);\n    }\n  };\n\n  const onIndexChange = (event) => {\n    setIndexTicker(event.target.value);\n    setIndexLoaded(false);\n  }\n\n  return (\n    <div>\n       <div className={classes.dropDown}>\n        Choose your market index\n        <Select value={indexTicker} onChange={onIndexChange} variant=\"outlined\">\n          <MenuItem value=\"NDX\">NASDAQ</MenuItem>\n          <MenuItem value=\"DJU\">Dow Jones Average</MenuItem>\n          <MenuItem value=\"^GSPC\">S&P 500</MenuItem>\n        </Select>\n      </div>\n      {series.length > 0 ? <HighchartsReact highcharts={Highcharts} options={chartOptions} /> : null}\n      <Button onClick={handleOpen} color=\"primary\">Add Ticker</Button>\n      <AddTicker open={open} handleClose={handleClose}>Test</AddTicker>\n      <div>Your initial portfolio total: {portfolioInitialTotal}</div>\n      <div>Based on your initial investment, the difference in choosing the market index {indexTicker} is: {portfolioFinalTotal - indexFinalTotal}</div>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}