{"ast":null,"code":"var _jsxFileName = \"/Users/toddstorm/workspace/mechanism-take-home/UI/src/containers/Home/Home.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport _ from 'lodash';\nimport Loading from '../../components/Loading/Loading';\nimport { Button, MenuItem, Select } from '@material-ui/core';\nimport useAppJwt from '../../hooks/useAppJwt';\nimport AddTicker from '../../components/AddTicker/AddTicker';\nconst axiosOptions = {\n  headers: {\n    'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY,\n    'x-rapidapi-host': process.env.REACT_APP_RAPID_API_HOST\n  }\n};\n\nconst Home = () => {\n  const [labels, setLabels] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [portfolioLoaded, setPortfolioLoaded] = useState(false);\n  const [indexLoaded, setIndexLoaded] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [portfolioInitialTotal, setPortfolioInitialTotal] = useState(0);\n  const {\n    appToken\n  } = useAppJwt();\n  const [indexTicker, setIndexTicker] = useState(''); // initial index state\n\n  const portfolioOptions = {\n    headers: {\n      'Authorization': `Bearer ${appToken}`\n    }\n  };\n  const loadPortfolioData = useCallback(async () => {\n    const portfolioData = await axios.get(process.env.REACT_APP_PORFOLIO_SERVICE, portfolioOptions);\n\n    const portfolioValue = _.map(portfolioData.data, stock => {\n      return parseFloat(stock.valueOnAquired) * parseInt(stock.units);\n    });\n\n    setPortfolioInitialTotal(_.sum(portfolioValue));\n\n    const tickers = _.map(portfolioData.data, stock => {\n      return stock.ticker;\n    });\n\n    const requests = []; // setup the axios requests for the portfolio tickers\n\n    _.forEach(tickers, ticker => {\n      requests.push(axios.get(`${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${ticker}&range=1y&region=US`, axiosOptions));\n    });\n\n    axios.all(requests).then(axios.spread((...responses) => {\n      const newSeries = [];\n      const newLabels = [];\n      let i = 0;\n\n      _.forEach(responses, response => {\n        const quotes = _.get(response.data, 'chart.result[0].indicators.quote[0].close', []);\n\n        quotes[0] = portfolioValue[i]; // initial investment\n\n        var j;\n\n        for (j = 1; j < quotes.length; j++) {\n          quotes[j] = quotes[j] * 100;\n        }\n\n        newSeries.push({\n          name: tickers[i],\n          type: 'spline',\n          data: quotes\n        });\n        i++;\n      });\n\n      const updatedLabels = _.map(_.get(responses[0].data, 'chart.result[0].timestamp', []), dt => {\n        const d = new Date(0);\n        d.setUTCSeconds(dt);\n        return d.toLocaleDateString(\"en-US\");\n      });\n\n      setSeries(newSeries);\n      setLabels(updatedLabels);\n      setPortfolioLoaded(true);\n    }));\n  }, [portfolioOptions]);\n  const loadData = useCallback(async () => {\n    if (indexTicker === '') return;\n    const one = `${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${indexTicker}&range=1y&region=US`;\n    const requestOne = axios.get(one, axiosOptions);\n    axios.all([requestOne]).then(axios.spread((...responses) => {\n      const responseOne = responses[0];\n      setPortfolioLoaded(true);\n\n      const newSeries = _.cloneDeep(series);\n\n      const data = _.get(responseOne.data, 'chart.result[0].indicators.quote[0].close', []);\n\n      const initialUnits = portfolioInitialTotal / data[0];\n\n      const formattedData = _.map(data, d => {\n        return d > 0 ? initialUnits * d : 0;\n      });\n\n      newSeries.push({\n        name: indexTicker,\n        type: 'spline',\n        data: formattedData\n      });\n\n      const lbls = _.map(_.get(responseOne.data, 'chart.result[0].timestamp', []), dt => {\n        const d = new Date(0);\n        d.setUTCSeconds(dt);\n        return d.toLocaleDateString(\"en-US\");\n      });\n\n      setLabels(lbls);\n      setSeries(newSeries);\n    })).catch(errors => {\n      console.log(\"Error getting data\", errors);\n    });\n  }, [indexTicker, portfolioInitialTotal, series]);\n  useEffect(() => {\n    // no point loading indexes to compare if no portfolio value loaded\n    if (portfolioInitialTotal > 0 && portfolioLoaded && !indexLoaded) {\n      loadData();\n    }\n  }, [loadData, portfolioInitialTotal, portfolioLoaded, indexLoaded]);\n  useEffect(() => {\n    if (!_.isEmpty(appToken) && !portfolioLoaded) {\n      loadPortfolioData();\n    }\n  }, [portfolioLoaded, appToken, loadPortfolioData]);\n  if (!portfolioLoaded) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 34\n    }\n  });\n  const chartOptions = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'My Portfolio'\n    },\n    xAxis: {\n      categories: labels\n    },\n    series: series\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onIndexChange = event => {\n    setIndexTicker(event.target.value);\n    setIndexLoaded(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    value: indexTicker,\n    onChange: onIndexChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"NDX\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, \"NASDAQ\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"DJU\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, \"Dow Jones Average\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"MID\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"S&P 400\"), /*#__PURE__*/React.createElement(MenuItem, {\n    value: \"SPX\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, \"S&P 500\"))), series.length > 0 ? /*#__PURE__*/React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: chartOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 28\n    }\n  }) : null, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleOpen,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, \"Add Ticker\"), /*#__PURE__*/React.createElement(AddTicker, {\n    open: open,\n    handleClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, \"Test\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, \"Your initial portfolio total: \", portfolioInitialTotal), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, \"Based on your initial investment, the difference in choosing the market index \", indexTicker, \" is:\"));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/toddstorm/workspace/mechanism-take-home/UI/src/containers/Home/Home.js"],"names":["React","useCallback","useEffect","useState","axios","Highcharts","HighchartsReact","_","Loading","Button","MenuItem","Select","useAppJwt","AddTicker","axiosOptions","headers","process","env","REACT_APP_RAPID_API_KEY","REACT_APP_RAPID_API_HOST","Home","labels","setLabels","series","setSeries","portfolioLoaded","setPortfolioLoaded","indexLoaded","setIndexLoaded","open","setOpen","portfolioInitialTotal","setPortfolioInitialTotal","appToken","indexTicker","setIndexTicker","portfolioOptions","loadPortfolioData","portfolioData","get","REACT_APP_PORFOLIO_SERVICE","portfolioValue","map","data","stock","parseFloat","valueOnAquired","parseInt","units","sum","tickers","ticker","requests","forEach","push","REACT_APP_QUOTE_SERVICE","all","then","spread","responses","newSeries","newLabels","i","response","quotes","j","length","name","type","updatedLabels","dt","d","Date","setUTCSeconds","toLocaleDateString","loadData","one","requestOne","responseOne","cloneDeep","initialUnits","formattedData","lbls","catch","errors","console","log","isEmpty","chartOptions","chart","title","text","xAxis","categories","handleOpen","handleClose","onIndexChange","event","target","value"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport _ from 'lodash';\nimport Loading from '../../components/Loading/Loading';\nimport { Button, MenuItem, Select } from '@material-ui/core';\nimport useAppJwt from '../../hooks/useAppJwt';\nimport AddTicker from '../../components/AddTicker/AddTicker';\n\nconst axiosOptions = {\n  headers: {\n    'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY,\n    'x-rapidapi-host': process.env.REACT_APP_RAPID_API_HOST,\n  }\n};\n\nconst Home = () => {\n  const [labels, setLabels] = useState([]);\n  const [series, setSeries] = useState([]);\n  const [portfolioLoaded, setPortfolioLoaded] = useState(false);\n  const [indexLoaded, setIndexLoaded] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [portfolioInitialTotal, setPortfolioInitialTotal] = useState(0);\n  const { appToken } = useAppJwt();\n  const [indexTicker, setIndexTicker] = useState(''); // initial index state\n\n  const portfolioOptions = {\n    headers: {\n      'Authorization': `Bearer ${appToken}`,\n    }\n  }\n\n  const loadPortfolioData = useCallback(async () => {\n    const portfolioData = await axios.get(process.env.REACT_APP_PORFOLIO_SERVICE, portfolioOptions);\n    \n    const portfolioValue = _.map(portfolioData.data, (stock) => {\n      return parseFloat(stock.valueOnAquired) * parseInt(stock.units);\n    });\n\n    setPortfolioInitialTotal(_.sum(portfolioValue));\n\n    const tickers = _.map(portfolioData.data, (stock) => {\n      return stock.ticker;\n    });\n\n    const requests = [];\n    // setup the axios requests for the portfolio tickers\n    _.forEach(tickers, (ticker) => {\n       requests.push(axios.get(`${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${ticker}&range=1y&region=US`, axiosOptions));\n    });\n\n    axios.all(requests).then(axios.spread((...responses) => {\n      const newSeries = [];\n      const newLabels = [];\n      let i = 0;\n      _.forEach(responses, (response) => {\n        const quotes = _.get(response.data, 'chart.result[0].indicators.quote[0].close', []);\n        quotes[0] = portfolioValue[i]; // initial investment\n\n        var j;\n        for (j = 1; j < quotes.length; j++) {\n          quotes[j] = quotes[j] * 100;\n        }\n        newSeries.push({\n              name: tickers[i],\n              type: 'spline',\n              data: quotes,\n            });\n        i++;\n      });\n\n      const updatedLabels = _.map(_.get(responses[0].data, 'chart.result[0].timestamp', []), (dt) => {\n        const d = new Date(0);\n        d.setUTCSeconds(dt);\n        return d.toLocaleDateString(\"en-US\");\n      });\n      setSeries(newSeries);\n      setLabels(updatedLabels);\n      setPortfolioLoaded(true);\n    }))\n  }, [portfolioOptions]);\n\n  const loadData = useCallback(async () => {\n    if (indexTicker === '') return;\n    const one = `${process.env.REACT_APP_QUOTE_SERVICE}/get-chart?interval=1d&symbol=${indexTicker}&range=1y&region=US`;\n    const requestOne = axios.get(one, axiosOptions);\n    axios.all([requestOne]).then(axios.spread((...responses) => {\n      const responseOne = responses[0]\n      setPortfolioLoaded(true);\n      const newSeries = _.cloneDeep(series);\n      const data = _.get(responseOne.data, 'chart.result[0].indicators.quote[0].close', []);\n\n      const initialUnits = portfolioInitialTotal / data[0];\n      const formattedData = _.map(data, (d) => {\n        return d > 0 ? initialUnits * d : 0;\n      });\n      newSeries.push({\n        name: indexTicker,\n        type: 'spline',\n        data: formattedData,\n      });\n      const lbls = _.map(_.get(responseOne.data, 'chart.result[0].timestamp', []), (dt) => {\n        const d = new Date(0);\n        d.setUTCSeconds(dt);\n        return d.toLocaleDateString(\"en-US\");\n      });\n      setLabels(lbls);\n      setSeries(newSeries);\n    })).catch((errors) => {\n      console.log(\"Error getting data\", errors);\n    });\n  }, [indexTicker, portfolioInitialTotal, series]);\n\n  useEffect(() => {\n    // no point loading indexes to compare if no portfolio value loaded\n    if (portfolioInitialTotal > 0 && portfolioLoaded && !indexLoaded) {\n      loadData();\n    }\n  }, [loadData, portfolioInitialTotal, portfolioLoaded, indexLoaded]);\n \n  useEffect(() => {\n    if (!_.isEmpty(appToken) && !portfolioLoaded) {\n      loadPortfolioData()\n    }\n  }, [portfolioLoaded, appToken, loadPortfolioData])\n\n    if (!portfolioLoaded) return <Loading />;\n\nconst chartOptions = {\n  chart: {\n    type: 'spline'\n  },\n  title: {\n    text: 'My Portfolio'\n  },\n  xAxis: {\n    categories: labels,\n  },\n  series: series,\n};\n\nconst handleOpen = () => {\n  setOpen(true);\n};\n\nconst handleClose = () => {\n  setOpen(false);\n};\n\nconst onIndexChange = (event) => {\n  setIndexTicker(event.target.value);\n  setIndexLoaded(false);\n}\n\n  return (\n    <div>\n      <div>\n        <Select value={indexTicker} onChange={onIndexChange}>\n          <MenuItem value=\"NDX\">NASDAQ</MenuItem>\n          <MenuItem value=\"DJU\">Dow Jones Average</MenuItem>\n          <MenuItem value=\"MID\">S&P 400</MenuItem>\n          <MenuItem value=\"SPX\">S&P 500</MenuItem>\n        </Select>\n      </div>\n      {series.length > 0 ? <HighchartsReact highcharts={Highcharts} options={chartOptions} /> : null}\n      <Button onClick={handleOpen} color=\"primary\">Add Ticker</Button>\n      \n      <AddTicker open={open} handleClose={handleClose}>Test</AddTicker>\n      <div>Your initial portfolio total: {portfolioInitialTotal}</div>\n      <div>Based on your initial investment, the difference in choosing the market index {indexTicker} is:</div>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}