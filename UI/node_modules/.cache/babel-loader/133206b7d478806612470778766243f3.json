{"ast":null,"code":"import React, { useContext, useEffect, useState } from 'react';\nimport JwtContext from '../providers/JwtContext';\nimport _ from 'lodash';\nimport firebase from \"firebase/app\";\nimport { Redirect } from 'react-router-dom';\n\nconst useAppJwt = () => {\n  const {\n    appToken,\n    setAppToken\n  } = useContext(JwtContext);\n  const [user, setUser] = useState({});\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        setUser(user);\n        user.getIdToken().then(token => {\n          setAppToken(token);\n        });\n      }\n\n      if (!user) {\n        var provider = new firebase.auth.GoogleAuthProvider();\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL).then(() => {\n          firebase.auth().signInWithPopup(provider).then(function (result) {\n            setAppToken(firebase.auth().currentUser.getIdToken());\n          }).catch(function (error) {});\n        });\n      }\n    });\n  }, [setAppToken]);\n\n  function isAuthenticated() {\n    return !_.isUndefined(firebase.auth().currentUser);\n  }\n\n  ;\n\n  function logout() {\n    setAppToken('');\n    firebase.auth().signOut();\n  }\n\n  return {\n    appToken,\n    isAuthenticated,\n    logout,\n    user\n  };\n};\n\nexport default useAppJwt;","map":{"version":3,"sources":["/Users/toddstorm/workspace/mechanism-take-home/UI/src/hooks/useAppJwt.js"],"names":["React","useContext","useEffect","useState","JwtContext","_","firebase","Redirect","useAppJwt","appToken","setAppToken","user","setUser","auth","onAuthStateChanged","getIdToken","then","token","provider","GoogleAuthProvider","setPersistence","Auth","Persistence","LOCAL","signInWithPopup","result","currentUser","catch","error","isAuthenticated","isUndefined","logout","signOut"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BT,UAAU,CAACG,UAAD,CAA5C;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AAEDD,EAAAA,SAAS,CAAC,MAAM;AACfI,IAAAA,QAAQ,CAACO,IAAT,GAAgBC,kBAAhB,CAAmC,UAASH,IAAT,EAAe;AAChD,UAAIA,IAAJ,EAAU;AACRC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAA,QAAAA,IAAI,CAACI,UAAL,GAAkBC,IAAlB,CAAwBC,KAAD,IAAW;AAChCP,UAAAA,WAAW,CAACO,KAAD,CAAX;AACD,SAFD;AAGD;;AACD,UAAI,CAACN,IAAL,EAAW;AACT,YAAIO,QAAQ,GAAG,IAAIZ,QAAQ,CAACO,IAAT,CAAcM,kBAAlB,EAAf;AACAb,QAAAA,QAAQ,CAACO,IAAT,GAAgBO,cAAhB,CAA+Bd,QAAQ,CAACO,IAAT,CAAcQ,IAAd,CAAmBC,WAAnB,CAA+BC,KAA9D,EACCP,IADD,CACM,MAAM;AACZV,UAAAA,QAAQ,CAACO,IAAT,GACEW,eADF,CACkBN,QADlB,EAC4BF,IAD5B,CACiC,UAASS,MAAT,EAAiB;AAC9Cf,YAAAA,WAAW,CAACJ,QAAQ,CAACO,IAAT,GAAgBa,WAAhB,CAA4BX,UAA5B,EAAD,CAAX;AACF,WAHF,EAGIY,KAHJ,CAGU,UAASC,KAAT,EAAgB,CACxB,CAJF;AAKC,SAPD;AAQD;AACF,KAlBD;AAmBA,GApBQ,EAoBN,CAAClB,WAAD,CApBM,CAAT;;AAuBC,WAASmB,eAAT,GAA2B;AACzB,WAAO,CAACxB,CAAC,CAACyB,WAAF,CAAcxB,QAAQ,CAACO,IAAT,GAAgBa,WAA9B,CAAR;AACD;;AAAA;;AAED,WAASK,MAAT,GAAkB;AAChBrB,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAJ,IAAAA,QAAQ,CAACO,IAAT,GAAgBmB,OAAhB;AACD;;AAED,SAAO;AACLvB,IAAAA,QADK;AAELoB,IAAAA,eAFK;AAGLE,IAAAA,MAHK;AAILpB,IAAAA;AAJK,GAAP;AAMD,CA1CD;;AA4CA,eAAeH,SAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport JwtContext from '../providers/JwtContext';\nimport _ from 'lodash';\nimport firebase from \"firebase/app\";\nimport { Redirect } from 'react-router-dom';\n\nconst useAppJwt = () => {\n  const { appToken, setAppToken } = useContext(JwtContext);\n  const [user, setUser] = useState({});\n\n useEffect(() => {\n  firebase.auth().onAuthStateChanged(function(user) {\n    if (user) {\n      setUser(user);\n      user.getIdToken().then((token) => {\n        setAppToken(token);\n      });\n    }\n    if (!user) {\n      var provider = new firebase.auth.GoogleAuthProvider();\n      firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\n      .then(() => {\n      firebase.auth()\n       .signInWithPopup(provider).then(function(result) {\n          setAppToken(firebase.auth().currentUser.getIdToken());\n       }).catch(function(error) {\n       });\n      });\n    }\n  });\n }, [setAppToken])\n\n\n  function isAuthenticated() {\n    return !_.isUndefined(firebase.auth().currentUser);\n  };\n\n  function logout() {\n    setAppToken('');\n    firebase.auth().signOut();\n  }\n\n  return {\n    appToken,\n    isAuthenticated,\n    logout,\n    user,\n  };\n};\n\nexport default useAppJwt;\n"]},"metadata":{},"sourceType":"module"}